import argparse
import os
import logging
import subprocess
import sys

from pybtex.utils import OrderedCaseInsensitiveDict

import bibboost.aux
import bibboost.cache


def run(aux_file, cache_file, bibboost_bib_file):
    """
    This function assumes that we are in the folder of aux_file, and that aux_file is just a `basename`
    :param aux_file: the aux file the user want to process
    :param cache_file: the file in which the cache will be stored
    :param bibboost_bib_file: the file which contains the resulting bibtex entries
    :return:
    """
    bib_files, citations = bibboost.aux.parse_aux_file(aux_file)

    with bibboost.cache.CacheBib(cache_file) as cache:
        cache.update_db(bib_files)
        used_entries = OrderedCaseInsensitiveDict(
            (key, entry) for key, entry in cache.get_entries(citations)
        )

    missed_entries = [key for key in citations if key not in used_entries]
    if len(missed_entries) > 0:
        logging.warning("missing entries: {}".format(", ".join(missed_entries)))

    with open(bibboost_bib_file, "w") as f:
        f.write("""% This file is generated by bibboost
% It should not be modified manually


""")
        f.write("\n\n".join(e for e in used_entries.itervalues()))

    bibboost.aux.change_bib_file(aux_file, bibboost_bib_file)


def main():
    logging.basicConfig(format='bibboost:%(levelname)s:%(message)s', level=logging.DEBUG)

    parser = argparse.ArgumentParser()
    parser.add_argument("auxfile", metavar="file.aux", type=str,
                        help="aux file with or without .aux extension (example: `paper.aux`, `mypaper`)")
    parser.add_argument("--run-bibtex", action="store_true", help="execute bibtex when done")
    args = parser.parse_args()

    aux_file = args.auxfile
    if not aux_file.endswith(".aux"):
        aux_file += ".aux"

    if not os.path.isfile(aux_file):
        logging.error("file `{}` does not exist".format(aux_file))
        sys.exit(1)

    aux_dir = os.path.dirname(aux_file)
    aux_file = os.path.basename(aux_file)
    if aux_dir != "":
        os.chdir(aux_dir)

    # From now on, we are in the `aux file` directory

    cache_file = aux_file[:-4] + ".bibboost.cache"
    bibboost_bib_file = aux_file[:-4] + ".bibboost.bib"

    run(aux_file, cache_file, bibboost_bib_file)

    if args.run_bibtex:
        logging.info("run `bibtex {}`".format(aux_file))
        subprocess.call(["bibtex", aux_file])


if __name__ == "__main__":
    main()
